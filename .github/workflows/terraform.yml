name: "Terraform"

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Configure credentials depending on the branch the things are being applied
      - name: Using Production Environment Credentials
        run: |
          echo "::set-env name=AWS_ACCESS_KEY_ID::${{ secrets.AWS_ACCESS_KEY }}"
          echo "::set-env name=AWS_SECRET_ACCESS_KEY::${{ secrets.AWS_SECRET_KEY }}"
          echo "::set-env name=TF_ENV::production"
        if: github.ref == 'refs/heads/master'

      - name: Using Development Environment Credentials
        run: |
          echo "::set-env name=AWS_ACCESS_KEY_ID::${{ secrets.AWS_DEV_ACCESS_KEY }}"
          echo "::set-env name=AWS_SECRET_ACCESS_KEY::${{ secrets.AWS_DEV_SECRET_KEY }}"
          echo "::set-env name=TF_ENV::development"
        if: github.ref == 'refs/heads/develop'

      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Initialize development
      - name: Terraform Init
        run: terraform init --backend-config="key=${{ env.TF_ENV }}-terraform.tfstate"

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan

        # On push to master, build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -auto-approve
